# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kuaisuan', [dirname(__file__)])
        except ImportError:
            import _kuaisuan
            return _kuaisuan
        if fp is not None:
            try:
                _mod = imp.load_module('_kuaisuan', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kuaisuan = swig_import_helper()
    del swig_import_helper
else:
    import _kuaisuan
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class XYZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kuaisuan.new_XYZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["x"] = _kuaisuan.XYZ_x_set
    __swig_getmethods__["x"] = _kuaisuan.XYZ_x_get
    if _newclass:x = _swig_property(_kuaisuan.XYZ_x_get, _kuaisuan.XYZ_x_set)
    __swig_setmethods__["y"] = _kuaisuan.XYZ_y_set
    __swig_getmethods__["y"] = _kuaisuan.XYZ_y_get
    if _newclass:y = _swig_property(_kuaisuan.XYZ_y_get, _kuaisuan.XYZ_y_set)
    __swig_setmethods__["z"] = _kuaisuan.XYZ_z_set
    __swig_getmethods__["z"] = _kuaisuan.XYZ_z_get
    if _newclass:z = _swig_property(_kuaisuan.XYZ_z_get, _kuaisuan.XYZ_z_set)
    def __iadd__(self, *args): return _kuaisuan.XYZ___iadd__(self, *args)
    def __isub__(self, *args): return _kuaisuan.XYZ___isub__(self, *args)
    def __imul__(self, *args): return _kuaisuan.XYZ___imul__(self, *args)
    def __idiv__(self, *args): return _kuaisuan.XYZ___idiv__(self, *args)
    def abs(self): return _kuaisuan.XYZ_abs(self)
    def __neg__(self): return _kuaisuan.XYZ___neg__(self)
    def __add__(self, *args): return _kuaisuan.XYZ___add__(self, *args)
    def __sub__(self, *args): return _kuaisuan.XYZ___sub__(self, *args)
    def __mul__(self, *args): return _kuaisuan.XYZ___mul__(self, *args)
    def __div__(self, *args): return _kuaisuan.XYZ___div__(self, *args)
    def __eq__(self, *args): return _kuaisuan.XYZ___eq__(self, *args)
    def __ne__(self, *args): return _kuaisuan.XYZ___ne__(self, *args)
    def __str__(self): return _kuaisuan.XYZ___str__(self)
    def __abs__(self): return _kuaisuan.XYZ___abs__(self)
    __swig_destroy__ = _kuaisuan.delete_XYZ
    __del__ = lambda self : None;
XYZ_swigregister = _kuaisuan.XYZ_swigregister
XYZ_swigregister(XYZ)
cvar = _kuaisuan.cvar
BYTE_OF_REALNUMBER = cvar.BYTE_OF_REALNUMBER
BYTE_OF_INDEX = cvar.BYTE_OF_INDEX
SEQUENCE_OF_ENDIAN = cvar.SEQUENCE_OF_ENDIAN


def abs(*args):
  return _kuaisuan.abs(*args)
abs = _kuaisuan.abs

def dot(*args):
  return _kuaisuan.dot(*args)
dot = _kuaisuan.dot

def torsion(*args):
  return _kuaisuan.torsion(*args)
torsion = _kuaisuan.torsion
class PBC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PBC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PBC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kuaisuan.new_PBC(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(self, *args): return _kuaisuan.PBC_update(self, *args)
    def image(self, *args): return _kuaisuan.PBC_image(self, *args)
    def scaleX(self, *args): return _kuaisuan.PBC_scaleX(self, *args)
    def scaleY(self, *args): return _kuaisuan.PBC_scaleY(self, *args)
    def scaleZ(self, *args): return _kuaisuan.PBC_scaleZ(self, *args)
    def scale(self, *args): return _kuaisuan.PBC_scale(self, *args)
    def __imul__(self, *args): return _kuaisuan.PBC___imul__(self, *args)
    __swig_getmethods__["parse"] = lambda x: _kuaisuan.PBC_parse
    if _newclass:parse = staticmethod(_kuaisuan.PBC_parse)
    def __str__(self): return _kuaisuan.PBC___str__(self)
    def get_a(self): return _kuaisuan.PBC_get_a(self)
    def get_b(self): return _kuaisuan.PBC_get_b(self)
    def get_c(self): return _kuaisuan.PBC_get_c(self)
    def get_va(self): return _kuaisuan.PBC_get_va(self)
    def get_vb(self): return _kuaisuan.PBC_get_vb(self)
    def get_vc(self): return _kuaisuan.PBC_get_vc(self)
    def get_volumn(self): return _kuaisuan.PBC_get_volumn(self)
    def get_alpha(self): return _kuaisuan.PBC_get_alpha(self)
    def get_beta(self): return _kuaisuan.PBC_get_beta(self)
    def get_gamma(self): return _kuaisuan.PBC_get_gamma(self)
    __swig_destroy__ = _kuaisuan.delete_PBC
    __del__ = lambda self : None;
PBC_swigregister = _kuaisuan.PBC_swigregister
PBC_swigregister(PBC)

def angle(*args):
  return _kuaisuan.angle(*args)
angle = _kuaisuan.angle

def rotate(*args):
  return _kuaisuan.rotate(*args)
rotate = _kuaisuan.rotate

def PBC_parse(*args):
  return _kuaisuan.PBC_parse(*args)
PBC_parse = _kuaisuan.PBC_parse

PBC.a = property(PBC.get_a)
PBC.b = property(PBC.get_b)
PBC.c = property(PBC.get_c)
PBC.alpha = property(PBC.get_alpha)
PBC.beta = property(PBC.get_beta)
PBC.gamma = property(PBC.get_gamma)
PBC.volumn = property(PBC.get_volumn)
PBC.va = property(PBC.get_va)
PBC.vb = property(PBC.get_vb)
PBC.vc = property(PBC.get_vc)


class EnergyProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyProxy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kuaisuan.delete_EnergyProxy
    __del__ = lambda self : None;
    def prepare(self, *args): return _kuaisuan.EnergyProxy_prepare(self, *args)
EnergyProxy_swigregister = _kuaisuan.EnergyProxy_swigregister
EnergyProxy_swigregister(EnergyProxy)

class ForceFieldEnergyProxy(EnergyProxy):
    __swig_setmethods__ = {}
    for _s in [EnergyProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceFieldEnergyProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [EnergyProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceFieldEnergyProxy, name)
    __repr__ = _swig_repr
    def prepare(self, *args): return _kuaisuan.ForceFieldEnergyProxy_prepare(self, *args)
    def __init__(self): 
        this = _kuaisuan.new_ForceFieldEnergyProxy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kuaisuan.delete_ForceFieldEnergyProxy
    __del__ = lambda self : None;
ForceFieldEnergyProxy_swigregister = _kuaisuan.ForceFieldEnergyProxy_swigregister
ForceFieldEnergyProxy_swigregister(ForceFieldEnergyProxy)

class NonbondEnergyProxy(ForceFieldEnergyProxy):
    __swig_setmethods__ = {}
    for _s in [ForceFieldEnergyProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonbondEnergyProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ForceFieldEnergyProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonbondEnergyProxy, name)
    __repr__ = _swig_repr
    def prepare(self, *args): return _kuaisuan.NonbondEnergyProxy_prepare(self, *args)
    def __init__(self): 
        this = _kuaisuan.new_NonbondEnergyProxy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kuaisuan.delete_NonbondEnergyProxy
    __del__ = lambda self : None;
NonbondEnergyProxy_swigregister = _kuaisuan.NonbondEnergyProxy_swigregister
NonbondEnergyProxy_swigregister(NonbondEnergyProxy)


def screenPairList(*args):
  return _kuaisuan.screenPairList(*args)
screenPairList = _kuaisuan.screenPairList
class ControlProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ControlProxy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def prepare(self, *args): return _kuaisuan.ControlProxy_prepare(self, *args)
    __swig_destroy__ = _kuaisuan.delete_ControlProxy
    __del__ = lambda self : None;
ControlProxy_swigregister = _kuaisuan.ControlProxy_swigregister
ControlProxy_swigregister(ControlProxy)

class SimulationJob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationJob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationJob, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kuaisuan.new_SimulationJob()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kuaisuan.delete_SimulationJob
    __del__ = lambda self : None;
    __swig_setmethods__["random_seed"] = _kuaisuan.SimulationJob_random_seed_set
    __swig_getmethods__["random_seed"] = _kuaisuan.SimulationJob_random_seed_get
    if _newclass:random_seed = _swig_property(_kuaisuan.SimulationJob_random_seed_get, _kuaisuan.SimulationJob_random_seed_set)
    def getCPU(self): return _kuaisuan.SimulationJob_getCPU(self)
    def setCPU(self, *args): return _kuaisuan.SimulationJob_setCPU(self, *args)
    cpu = property(getCPU, setCPU)

    def getE(self, *args): return _kuaisuan.SimulationJob_getE(self, *args)
    def getEG(self, *args): return _kuaisuan.SimulationJob_getEG(self, *args)
    def getEGH(self, *args): return _kuaisuan.SimulationJob_getEGH(self, *args)
SimulationJob_swigregister = _kuaisuan.SimulationJob_swigregister
SimulationJob_swigregister(SimulationJob)

class MolecularDynamicJob(SimulationJob):
    __swig_setmethods__ = {}
    for _s in [SimulationJob]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MolecularDynamicJob, name, value)
    __swig_getmethods__ = {}
    for _s in [SimulationJob]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MolecularDynamicJob, name)
    __repr__ = _swig_repr
    def run_md(self, *args): return _kuaisuan.MolecularDynamicJob_run_md(self, *args)
    def __init__(self): 
        this = _kuaisuan.new_MolecularDynamicJob()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kuaisuan.delete_MolecularDynamicJob
    __del__ = lambda self : None;
MolecularDynamicJob_swigregister = _kuaisuan.MolecularDynamicJob_swigregister
MolecularDynamicJob_swigregister(MolecularDynamicJob)



